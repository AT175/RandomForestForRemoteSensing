source('~/AMNH/R_Project/git/randomForestClassification/rf_classification_probability.R')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/AMNH/R_Project/git/randomForestClassification/rf_classification_probability.R')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
head(trainvals)
uniqueAtt
head() predictors)
head(predictors)
head(response)
head(attributeVector)
?rep.int
x
uniqueAtt[x]
nrow(satValues)
head(satValues)
satValues <- extract(satImage, class_data[i,])
class(satValues)
satValues <- as.data.frame(do.call(rbind,satValues))
class(satValues)
satValues <- extract(satImage, class_data[i,])
head(satValues)
head(satValues)
a=unlist(satValues)
class(a)
head(a)
?unlist
?do.call
class(response)
cat("Create training data from a Shapefile with training data polygons and the image\n")
predictors <- data.frame()
response <- numeric()
for (x in 1:length(uniqueAtt)) {
# Get the metadata for all polygons for a particular class (based on the uniqueAtt variable)
class_data<- vec[vec[[attName]]==uniqueAtt[x],]
# Extract and combine predictor and response variables for each polygon within a class
for (i in 1:dim(class_data)[1]) {
satValues <- extract(satImage, class_data[i,])
satValues <- as.data.frame(do.call(rbind,satValues))
attributeVector <- rep.int(uniqueAtt[x],nrow(satValues))
predictors <- rbind(predictors, satValues)
response <- c(response, attributeVector)
#     if (i == 1) {
#       tempPredictors <- satValues
#       tempResponse <- attributeVector
#     } else {
#       tempPredictors <- rbind(tempPredictors, satValues)
#       tempResponse <- c(tempResponse, attributeVector)
#     }
#   }
# # Combine predictor and response variables for each class
#   if (x == 1) {
#     predictors <- tempPredictors
#     response <- tempResponse
#   } else {
#     predictors<- rbind(predictors, tempPredictors)
#     response <- c(response, tempResponse)
#   }
}
}
head(response)
head(predictors)
}
source('~/.active-rstudio-document')
dim(class_data)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/AMNH/R_Project/git/randomForestClassification/rf_classification.R')
source('/media/684EE5FF4EE5C642/AMNH/R_Project/git/randomForestClassification/rf_classification.R')
source('~/.active-rstudio-document')
source('/media/684EE5FF4EE5C642/AMNH/R_Project/JeffHarris/rf_classificationForJeff.R')
;s()
ls()
shapefile <- '/media/684EE5FF4EE5C642/AMNH/R_Project/JeffHarris/class_rois_half.shp'
# Approximate number of training samples to be randomly selected for each land cover class
# If numsamps is set to "0" then all pixels in all of the polygons will be used as training samples
numsamps <- 200
# Name of the attribute that holds the integer land cover type identifyer
attName <- 'type_id'
# No-data value for the input image
nd <- 0
# Name and path for the input satellite image
inImage <-'/media/684EE5FF4EE5C642/AMNH/R_Project/TestData/spot_subset_400.tif'
# Name and path of the output GeoTiff image
outImageName <- '/media/684EE5FF4EE5C642/AMNH/R_Project/TestData/testProb_v6.tif'
# Name and location of the output Shapefile point file that will be created. If this output
# is not needed you can enter two double or single-quotes (“” or '')
# Note that if this file exists the write will fail with the message "Creation of output file failed"
outMarginFile <- '/media/684EE5FF4EE5C642/AMNH/R_Project/TestData/junkPoint.shp'
# Output classification layer without applying threshold (enter TRUE or FALSE)
classImage <- TRUE
# Output probability image layer (enter TRUE or FALSE)
probImage <- TRUE
# Output classification layer and set pixels with probability less than "probThreshold" to 0 (enter TRUE or FALSE)
threshImage <- TRUE
# Enter threshold probability in percent (values must be between 0 and 100) only used if threshImage=TRUE
probThreshold <- 75
# Layer number (band number) for the X and Y axis of the feature space plot.
# If you do not want to calculate a feature plot enter 0 as the layer number
xBand <- 0
yBand <- 2
#######################################################################################
#
# Start processing
startTime <- Sys.time()
cat("Start time", format(startTime),"\n")
# Read the Shapefile
vec <- readShapePoly(shapefile)
#
# Load the image then flag all no-data values (nd) so they are not processed
satImage <- stack(inImage)
for (b in 1:nlayers(satImage)) { NAvalue(satImage@layers[[b]]) <- nd }
#
# Create vector of unique land cover attribute values
allAtt <- slot(vec, "data")
tabAtt <-table(allAtt[[attName]])
uniqueAtt <-as.numeric(names(tabAtt))
attName <- 'GRIDCODE'
# No-data value for the input image
nd <- 0
# Name and path for the input satellite image
inImage <-'/media/684EE5FF4EE5C642/AMNH/R_Project/TestData/spot_subset_400.tif'
# Name and path of the output GeoTiff image
outImageName <- '/media/684EE5FF4EE5C642/AMNH/R_Project/TestData/testProb_v6.tif'
# Name and location of the output Shapefile point file that will be created. If this output
# is not needed you can enter two double or single-quotes (“” or '')
# Note that if this file exists the write will fail with the message "Creation of output file failed"
outMarginFile <- '/media/684EE5FF4EE5C642/AMNH/R_Project/TestData/junkPoint.shp'
# Output classification layer without applying threshold (enter TRUE or FALSE)
classImage <- TRUE
# Output probability image layer (enter TRUE or FALSE)
probImage <- TRUE
# Output classification layer and set pixels with probability less than "probThreshold" to 0 (enter TRUE or FALSE)
threshImage <- TRUE
# Enter threshold probability in percent (values must be between 0 and 100) only used if threshImage=TRUE
probThreshold <- 75
# Layer number (band number) for the X and Y axis of the feature space plot.
# If you do not want to calculate a feature plot enter 0 as the layer number
xBand <- 0
yBand <- 2
#######################################################################################
#
# Start processing
startTime <- Sys.time()
cat("Start time", format(startTime),"\n")
# Read the Shapefile
vec <- readShapePoly(shapefile)
#
# Load the image then flag all no-data values (nd) so they are not processed
satImage <- stack(inImage)
for (b in 1:nlayers(satImage)) { NAvalue(satImage@layers[[b]]) <- nd }
#
# Create vector of unique land cover attribute values
allAtt <- slot(vec, "data")
tabAtt <-table(allAtt[[attName]])
uniqueAtt <-as.numeric(names(tabAtt))
vec <- readShapePoly(shapefile)
vec <- readShapePoly(shapefile)
source('~/.active-rstudio-document')
install.packages(c("deldir", "rgeos", "spdep"))
?over
?over
source('~/.active-rstudio-document')
response <- over(xy_allClasses, vec)[[attName]]
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
?pdf
source('/media/684EE5FF4EE5C642/AMNH/R_Project/git/randomForestClassification/rf_classification.R')
source('/media/684EE5FF4EE5C642/AMNH/R_Project/git/randomForestClassification/rf_classification.R')
numBands <- classImage + probImage + threshImage
# Calculate the image block size for processing
bs <- blockSize(satImage)
# Create the output raster block
outImage <- brick(satImage, values=FALSE, nl=numBands)
outImage <- writeStart(outImage, filename=outImageName, progress='text', format='GTiff', datatype='INT1U', overwrite=TRUE)
# Loop though each of the image blocks to calculate the output layers selected in the variables section
outImage <- writeStart(outImage, filename=outImageName, progress='text', format='GTiff', datatype='INT1U', overwrite=TRUE)
outImageName
outImage
install.packages("raster")
source('/media/684EE5FF4EE5C642/AMNH/R_Project/git/randomForestClassification/rf_classification.R')
sapply
source('~/AMNH/R_Project/git/randomForestClassification/rf_classification_v2.R')
source('~/AMNH/R_Project/git/randomForestClassification/rf_classification.R')
source('~/AMNH/R_Project/git/randomForestClassification/rf_classification.R')
source('~/AMNH/R_Project/git/randomForestClassification/rf_classification.R')
head(xy_allClasses)
class(xy_allClasses)
class(vec)
attName
class(response)
head(response)
vec[[attName]]
source('~/AMNH/R_Project/git/randomForestClassification/rf_classification.R')
